[{"path":"https://cynthiahqy.github.io/xmap/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 C. Huang Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cynthiahqy.github.io/xmap/articles/handling-xmap-tbls.html","id":"nesting-and-invalidation-of-crossmap-tibbles","dir":"Articles","previous_headings":"","what":"Nesting and Invalidation of Crossmap Tibbles","title":"Handling Crossmap Tibbles","text":"cases, crossmap tibbles (xmap_tbl) behave just like regular data frames tibbles. However, make use nesting retain meaningful variable names whilst also attaching ., ..weights roles. column xmap_tbl actually contains one-column tibble: nested structure can lead unexpected behaviour manipulating xmap_tbl standard dplyr verbs. somewhat intentional subsetting can (silently) invalidate crossmap (especially weights see d -> CC ): cases, recommend flattening crossmap tibble back standard tibble, modifying coercing back xmap_tbl ensure weights valid.","code":"abc_xmap <- demo$abc_links |>   as_xmap_tbl(lower, upper, share) str(abc_xmap) #> xmap_tbl [6 × 3] (S3: xmap_tbl/xmap/tbl_df/tbl/data.frame) #>  $ .from     : tibble [6 × 1] (S3: tbl_df/tbl/data.frame) #>   ..$ lower: chr [1:6] \"a\" \"b\" \"c\" \"d\" ... #>  $ .to       : tibble [6 × 1] (S3: tbl_df/tbl/data.frame) #>   ..$ upper: chr [1:6] \"AA\" \"BB\" \"BB\" \"CC\" ... #>  $ .weight_by: tibble [6 × 1] (S3: tbl_df/tbl/data.frame) #>   ..$ share: num [1:6] 1 1 1 0.3 0.6 0.1 #>  - attr(*, \"tol\")= num 1.49e-08 abc_xmap[1:4, ] #> # A crossmap tibble: 4 × 3 #> # with unique keys:  [4] lower -> [3] upper #>   .from$lower .to$upper .weight_by$share #>   <chr>       <chr>                <dbl> #> 1 a           AA                     1   #> 2 b           BB                     1   #> 3 c           BB                     1   #> 4 d           CC                     0.3"},{"path":"https://cynthiahqy.github.io/xmap/articles/handling-xmap-tbls.html","id":"flattening-and-exporting-crossmaps","dir":"Articles","previous_headings":"Nesting and Invalidation of Crossmap Tibbles","what":"Flattening and Exporting Crossmaps","title":"Handling Crossmap Tibbles","text":"ways flatten unpack crossmap tibble. recommend using tidyr::unpack() purrr:flatten_df(), return tibbles: saving exporting xmap_tbl objects flat files (e.g. .csv), need first convert standard tibble data.frame without nesting.","code":"abc_xmap |>   tidyr::unpack(dplyr::everything()) ## or #> # A tibble: 6 × 3 #>   lower upper share #>   <chr> <chr> <dbl> #> 1 a     AA      1   #> 2 b     BB      1   #> 3 c     BB      1   #> 4 d     CC      0.3 #> 5 d     DD      0.6 #> 6 d     EE      0.1  abc_xmap |>   purrr::flatten_df() #> # A tibble: 6 × 3 #>   lower upper share #>   <chr> <chr> <dbl> #> 1 a     AA      1   #> 2 b     BB      1   #> 3 c     BB      1   #> 4 d     CC      0.3 #> 5 d     DD      0.6 #> 6 d     EE      0.1 abc_xmap |>   purrr::flatten_df() |>   readr::write_csv(\"path/xmap.csv\")"},{"path":"https://cynthiahqy.github.io/xmap/articles/handling-xmap-tbls.html","id":"summarising-crossmaps","dir":"Articles","previous_headings":"","what":"Summarising Crossmaps","title":"Handling Crossmap Tibbles","text":"number features crossmaps might interest documenting data provenance preprocessing steps. include selection interesting properties calculate :","code":""},{"path":"https://cynthiahqy.github.io/xmap/articles/handling-xmap-tbls.html","id":"redistribution-from-source-keys","dir":"Articles","previous_headings":"Summarising Crossmaps","what":"Redistribution from Source Keys","title":"Handling Crossmap Tibbles","text":"crossmap involves redistributions, (.xmap$.weight_by != 1) true. find links involved redistribution:","code":"abc_xmap |>   dplyr::filter(.weight_by[[1]] != 1) #> # A crossmap tibble: 3 × 3 #> # with unique keys:  [1] lower -> [3] upper #>   .from$lower .to$upper .weight_by$share #>   <chr>       <chr>                <dbl> #> 1 d           CC                     0.3 #> 2 d           DD                     0.6 #> 3 d           EE                     0.1"},{"path":"https://cynthiahqy.github.io/xmap/articles/handling-xmap-tbls.html","id":"composition-of-target-keys","dir":"Articles","previous_headings":"Summarising Crossmaps","what":"Composition of Target Keys","title":"Handling Crossmap Tibbles","text":"can summarise source keys contributed target:","code":"abc_xmap |>   dplyr::group_by(.to) |>   dplyr::summarise(\".from({names(abc_xmap$.from)})\" := paste(.from[[1]], collapse = \", \")) #> # A tibble: 5 × 2 #>   .to$upper `.from(lower)` #>   <chr>     <chr>          #> 1 AA        a              #> 2 BB        b, c           #> 3 CC        d              #> 4 DD        d              #> 5 EE        d"},{"path":"https://cynthiahqy.github.io/xmap/articles/handling-xmap-tbls.html","id":"visualisation","dir":"Articles","previous_headings":"","what":"Visualisation","title":"Handling Crossmap Tibbles","text":"Crossmap tibbles valid edge lists, can visualised graphs using packages ggraph.","code":""},{"path":"https://cynthiahqy.github.io/xmap/articles/xmap.html","id":"the-crossmaps-framework-and-xmap-workflow","dir":"Articles","previous_headings":"","what":"The Crossmaps Framework and {xmap} workflow","title":"xmap","text":"package implementation Crossmaps Framework unified specification, verification, implementation documentation operations involved transforming aggregate statistics related measurement instruments (e.g. classification codes). framework conceptualises aggregation redistribution numeric masses related taxonomic structures operation applies graph-based representation mapping redistribution logic source target keys (crossmap), conformable key-value pairs (shared mass array). crossmap specifies: related pairs source target key (e.g. states country) weights 0 1 distributing numeric mass related pair source target keys (e.g. 25% country-level GDP -> state-) shared mass array collection key-value pairs, values form shared numeric keys parts shared conceptual whole (e.g. GDP state -> country) crossmaps framework alternative approach data transformation removes need bespoke code handle data preparation involving many--one one--many operations. framework gives rise assertions input crossmap shared mass arrays ensure transformations valid, implemented exactly specified. Valid well-documented transformation workflows following properties: preservation shared total mass transformation. example, country level GDP remain constant regardless disaggregation method granularity (e.g. state vs county) explicit handling missing values, without implicit missing value arithemtic (e.g. aggregating ‘missing’ state-level mass country-level treating values zeros via expressions like sum(state, na.rm = TRUE)) See related paper, Unified Statistical Computational Framework Ex-Post Harmonisation Aggregate Statistics, details conditions guarantee properties. package implements workflow warnings errors ensure relevant conditions met.","code":""},{"path":"https://cynthiahqy.github.io/xmap/articles/xmap.html","id":"example-country-state-mappings","dir":"Articles","previous_headings":"","what":"Example: Country-State Mappings","title":"xmap","text":"Consider data transformations reference relations hierarchical administrative regions. following example, use basic data manipulation operations dplyr generate mapping weights transforming numeric mass (e.g. GDP): aggregating state-level country-level, redistributing country-level state-level","code":""},{"path":"https://cynthiahqy.github.io/xmap/articles/xmap.html","id":"aggregation-coverage-and-missing-value-checks","dir":"Articles","previous_headings":"Example: Country-State Mappings","what":"Aggregation, Coverage, and Missing Value Checks","title":"xmap","text":"aggregation, use unit weights: Links validated coercing crossmaps, additional information transformation computed (.e. many unique keys source target taxonomies): unit weights represent “transfer” 100% source values indexed .keys target .keys. Let’s generate dummy state-level data apply aggregation : Now transform / aggregate data: happens crossmap missing instructions multiple states? error prevents accidental dropping observations incomplete specification transformation instruction. inspect remedy issue, can use diagnose_apply_xmap() find keys .data covered .xmap: Missing values also flagged encourage explicit handling missing values apply_xmap() mapping transformation:","code":"aus_state_agg_links <- demo$aus_state_pairs |>   mutate(ones = 1L) (agg_xmap <- aus_state_agg_links |>   as_xmap_tbl(from = state, to = ctry, weight_by = ones) ) #> # A crossmap tibble: 8 × 3 #> # with unique keys:  [8] state -> [1] ctry #>   .from$state .to$ctry .weight_by$ones #>   <chr>       <chr>              <int> #> 1 AU-ACT      AUS                    1 #> 2 AU-NSW      AUS                    1 #> 3 AU-NT       AUS                    1 #> 4 AU-QLD      AUS                    1 #> 5 AU-SA       AUS                    1 #> 6 AU-TAS      AUS                    1 #> 7 AU-VIC      AUS                    1 #> 8 AU-WA       AUS                    1 set.seed(1395) (aus_state_data <- demo$aus_state_pairs |>   mutate(     gdp = runif(n(), 100, 2000),     ref = 100   )) #> # A tibble: 8 × 4 #>   ctry  state    gdp   ref #>   <chr> <chr>  <dbl> <dbl> #> 1 AUS   AU-ACT 1626.   100 #> 2 AUS   AU-NSW 1244.   100 #> 3 AUS   AU-NT   703.   100 #> 4 AUS   AU-QLD  239.   100 #> 5 AUS   AU-SA  1388.   100 #> 6 AUS   AU-TAS 1192.   100 #> 7 AUS   AU-VIC 1535.   100 #> 8 AUS   AU-WA   306.   100 (aus_ctry_data <- aus_state_data |>   apply_xmap(     .xmap = agg_xmap,     values_from = c(gdp, ref),     keys_from = state   ) ) #> # A tibble: 1 × 3 #>   ctry    gdp   ref #>   <chr> <dbl> <dbl> #> 1 AUS   8233.   800 ## dropping links agg_xmap[1:3, ] #> # A crossmap tibble: 3 × 3 #> # with unique keys:  [3] state -> [1] ctry #>   .from$state .to$ctry .weight_by$ones #>   <chr>       <chr>              <int> #> 1 AU-ACT      AUS                    1 #> 2 AU-NSW      AUS                    1 #> 3 AU-NT       AUS                    1  ## will lead to an error! apply_xmap(   .data = aus_state_data,   .xmap = agg_xmap[1:3, ],   values_from = c(gdp, ref),   keys_from = state ) #> Error in `apply_xmap()`: #> ✖ One or more keys in `.data` do not have corresponding links in `.xmap` #> ℹ Add missing links to `.xmap` or subset `.data` diagnose_apply_xmap(   .data = aus_state_data,   .xmap = agg_xmap[1:3, ],   values_from = c(gdp, ref) ) #> Warning: ✖ Found 8 keys in `.data` without corresponding match in `.xmap$.from` #> See .$not_covered #> $not_covered #> # A tibble: 8 × 2 #>   .key         .value$gdp  $ref #>   <tibble[,0]>      <dbl> <dbl> #> 1                   1626.   100 #> 2                   1244.   100 #> 3                    703.   100 #> 4                    239.   100 #> 5                   1388.   100 #> 6                   1192.   100 #> 7                   1535.   100 #> 8                    306.   100 # add some `NA` aus_state_data_na <- aus_state_data aus_state_data_na[c(1, 3, 5), \"gdp\"] <- NA  apply_xmap(   .data = aus_state_data_na,   .xmap = agg_xmap,   values_from = gdp,   keys_from = state ) #> Error in `apply_xmap()`: #> ✖ Missing values not allowed in `.data` columns: gdp #> ℹ Remove or replace missing values."},{"path":"https://cynthiahqy.github.io/xmap/articles/xmap.html","id":"redistribution-valid-weights-and-preserving-totals","dir":"Articles","previous_headings":"Example: Country-State Mappings","what":"Redistribution, valid weights and preserving totals","title":"xmap","text":"redistributing, can choose weights long sum weights outgoing links source key totals one (dplyr::near() enough). ensures split source values percentage parts sum 100%. common naive strategy distribute equally amongst related target keys: use invalid weights, unit weights, as_xmap_tbl() error: Except case one--one mappings, crossmaps generally lateral (one-way), different weights direction. sophisticated strategy generating weights use reference information. example, can use population shares redistribute GDP states: Let’s redistribute country level data aggregated back state level using calcuted population weights: Note: values transformed ref column exactly match float values .weight_by$pop_share used transformation weights. due floating point inaccuracies. larger transformations keys, may result slight mismatches total numeric mass transformation.","code":"demo$aus_state_pairs |>   group_by(ctry) |>   mutate(equal = 1 / n_distinct(state)) |>   ungroup() |>   as_xmap_tbl(from = ctry, to = state, weight_by = equal) #> # A crossmap tibble: 8 × 3 #> # with unique keys:  [1] ctry -> [8] state #>   .from$ctry .to$state .weight_by$equal #>   <chr>      <chr>                <dbl> #> 1 AUS        AU-ACT               0.125 #> 2 AUS        AU-NSW               0.125 #> 3 AUS        AU-NT                0.125 #> 4 AUS        AU-QLD               0.125 #> 5 AUS        AU-SA                0.125 #> 6 AUS        AU-TAS               0.125 #> 7 AUS        AU-VIC               0.125 #> 8 AUS        AU-WA                0.125 demo$aus_state_pairs |>   mutate(ones = 1) |>   as_xmap_tbl(from = ctry, to = state, weight_by = ones) #> Error in `xmap_tbl()`: #> ! Invalid `.weight_by` found for some links #> ✖ The total outgoing `.weight_by` for some `.from` nodes are not near enough to #>   1 #> ℹ Modify `.weight_by` or adjust `tol` and try again. #> ℹ Use `diagnose_xmap_tbl() for more information. (split_xmap_pop <- demo$aus_state_pop_df |>   group_by(ctry) |>   mutate(pop_share = pop / sum(pop)) |>   ungroup() |>   as_xmap_tbl(     from = ctry, to = state, weight_by = pop_share   )) #> # A crossmap tibble: 8 × 3 #> # with unique keys:  [1] ctry -> [8] state #>   .from$ctry .to$state .weight_by$pop_share #>   <chr>      <chr>                    <dbl> #> 1 AUS        AU-ACT                 0.0176  #> 2 AUS        AU-NSW                 0.314   #> 3 AUS        AU-NT                  0.00965 #> 4 AUS        AU-QLD                 0.205   #> 5 AUS        AU-SA                  0.0701  #> 6 AUS        AU-TAS                 0.0220  #> 7 AUS        AU-VIC                 0.255   #> 8 AUS        AU-WA                  0.107 aus_state_data2 <- aus_ctry_data |>   mutate(ref = 10000) |>   apply_xmap(split_xmap_pop,     values_from = c(gdp, ref),     keys_from = ctry   ) #> # A tibble: 8 × 5 #>   .from$ctry state     gdp    ref .weight_by$pop_share #>   <chr>      <chr>   <dbl>  <dbl>                <dbl> #> 1 AUS        AU-ACT  145.   176.               0.0176  #> 2 AUS        AU-NSW 2584.  3139.               0.314   #> 3 AUS        AU-NT    79.4   96.5              0.00965 #> 4 AUS        AU-QLD 1687.  2049.               0.205   #> 5 AUS        AU-SA   577.   701.               0.0701  #> 6 AUS        AU-TAS  181.   220.               0.0220  #> 7 AUS        AU-VIC 2096.  2546.               0.255   #> 8 AUS        AU-WA   883.  1072.               0.107"},{"path":"https://cynthiahqy.github.io/xmap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cynthia Huang. Author, maintainer. Laura Puzzello. Author, funder.","code":""},{"path":"https://cynthiahqy.github.io/xmap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Huang C, Puzzello L (2024). xmap: Data structures functions using Crossmaps approach ex-post harmonisation aggregate statistics. R package version 0.1.0, https://cynthiahqy.github.io/xmap/, https://github.com/cynthiahqy/xmap.","code":"@Manual{,   title = {xmap: Data structures and functions for using the Crossmaps approach to ex-post harmonisation of aggregate statistics},   author = {Cynthia Huang and Laura Puzzello},   year = {2024},   note = {R package version 0.1.0, https://cynthiahqy.github.io/xmap/},   url = {https://github.com/cynthiahqy/xmap}, }"},{"path":"https://cynthiahqy.github.io/xmap/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data structures and functions for using the Crossmaps approach to ex-post harmonisation of aggregate statistics","text":"install latest release xmap:","code":"remotes::install_github(\"cynthiahqy/xmap\")"},{"path":"https://cynthiahqy.github.io/xmap/reference/apply_xmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Crossmap Transformation to Conformable Data — apply_xmap","title":"Apply Crossmap Transformation to Conformable Data — apply_xmap","text":"function applies crossmap transformation dataset, transforming data based specified mapping rules.","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/apply_xmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Crossmap Transformation to Conformable Data — apply_xmap","text":"","code":"apply_xmap(.data, .xmap, ..., values_from, keys_from = names(.xmap$.from))  diagnose_apply_xmap(.data, .xmap, ..., values_from, keys_from = NULL)"},{"path":"https://cynthiahqy.github.io/xmap/reference/apply_xmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Crossmap Transformation to Conformable Data — apply_xmap","text":".data dataset transform. .xmap `xmap_tbl` object. ... (reserved) values_from `tidyselect` expression columns `.data` values transform keys_from `tidyselect` expression specifies column `.data` match `.xmap$`","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/apply_xmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Crossmap Transformation to Conformable Data — apply_xmap","text":"tibble transformed data.","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/as_xmap_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercing data frames of links to crossmap tibbles — as_xmap_tbl","title":"Coercing data frames of links to crossmap tibbles — as_xmap_tbl","text":"method takes data.frame-like object converts `xmap_tbl` based specified columns '', '', 'weight'.","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/as_xmap_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercing data frames of links to crossmap tibbles — as_xmap_tbl","text":"","code":"as_xmap_tbl(x, ...)  # S3 method for class 'data.frame' as_xmap_tbl(x, from, to, weight_by, ..., tol = .Machine$double.eps^0.5)  diagnose_as_xmap_tbl(   x,   from,   to,   weight_by,   ...,   tol = .Machine$double.eps^0.5 )"},{"path":"https://cynthiahqy.github.io/xmap/reference/as_xmap_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercing data frames of links to crossmap tibbles — as_xmap_tbl","text":"x data.frame tibble converted crossmap tibble. ... (reserved) Additional arguments passed methods. column `x` specifies '' nodes. column `x` specifies '' nodes. weight_by column `x` specifies weight links. tol Tolerance comparison.","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/as_xmap_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercing data frames of links to crossmap tibbles — as_xmap_tbl","text":"Returns xmap tibble object.","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/as_xmap_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercing data frames of links to crossmap tibbles — as_xmap_tbl","text":"","code":"demo$abc_links |>     as_xmap_tbl(from = lower, to = upper, weight_by = share) #> # A crossmap tibble: 6 × 3 #> # with unique keys:  [4] lower -> [5] upper #>   .from$lower .to$upper .weight_by$share #>   <chr>       <chr>                <dbl> #> 1 a           AA                     1   #> 2 b           BB                     1   #> 3 c           BB                     1   #> 4 d           CC                     0.3 #> 5 d           DD                     0.6 #> 6 d           EE                     0.1"},{"path":"https://cynthiahqy.github.io/xmap/reference/demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo objects for the `xmap` package — demo","title":"Demo objects for the `xmap` package — demo","text":"collection demo inputs experimenting functions `xmap` package. `_pairs` objects tibbles just source-target *pairs* (weights) `_links` objects tibbles weighted source-target *links*.","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo objects for the `xmap` package — demo","text":"","code":"demo"},{"path":"https://cynthiahqy.github.io/xmap/reference/demo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo objects for the `xmap` package — demo","text":"## `demo` list : ctr_iso3c_pairs named vector 249 elements. Names ISO-3 country codes, values ISO English country names. Retrieved `countrycode` package:    https://github.com/vincentarelbundock/countrycode anzsco22_isco8_crosswalk tibble 10 rows 5 columns. Subset crosswalk ANZSCO22 ISCO8 Occupation Code Standards published AUstralian Bureau Statistics anzsco22_stats tibble 10 rows 2 columns. Stylised Occupation Counts abc_links tibble 6 rows 3 columns, specifying links `lower`-“ aus_state_pairs named list 1 element named \"AUS\" containing codes Australian states aus_state_pop_df tibble containing 2022 population figures Australia state. Retrieved :    https://www.abs.gov.au/statistics/people/population/national-state--territory-population/jun-2022","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demo objects for the `xmap` package — demo","text":"","code":"demo$abc_links #> # A tibble: 6 × 3 #>   lower upper share #>   <chr> <chr> <dbl> #> 1 a     AA      1   #> 2 b     BB      1   #> 3 c     BB      1   #> 4 d     CC      0.3 #> 5 d     DD      0.6 #> 6 d     EE      0.1"},{"path":"https://cynthiahqy.github.io/xmap/reference/vhas.html","id":null,"dir":"Reference","previous_headings":"","what":"Boolean flags for properties of candidate and validated xmap links (internal) — vhas","title":"Boolean flags for properties of candidate and validated xmap links (internal) — vhas","text":"`vhas_*()` functions check properties xmap links /candidate links. functions accepts equal length vector inputs support multiple link formats, check inputs xmap.","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/vhas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boolean flags for properties of candidate and validated xmap links (internal) — vhas","text":"","code":"vhas_no_dup_pairs(v_from, v_to)  vhas_valid_weights(v_from, v_weights, tol = .Machine$double.eps^0.5)"},{"path":"https://cynthiahqy.github.io/xmap/reference/vhas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boolean flags for properties of candidate and validated xmap links (internal) — vhas","text":"v_from, v_to, v_weights equal length vectors containing source-target node pairs tol numeric \\(\\ge 0\\). Ignore differences smaller `tol`. Passed `tolerance` arg `base::.equal()`.","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/vhas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boolean flags for properties of candidate and validated xmap links (internal) — vhas","text":"TRUE FALSE","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/vhas.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Boolean flags for properties of candidate and validated xmap links (internal) — vhas","text":"vhas_no_dup_pairs(): Returns TRUE xmap vhas_valid_weights(): Returns TRUE weights given `` label sum one (approximately)","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/xmap-package.html","id":null,"dir":"Reference","previous_headings":"","what":"xmap: Data structures and functions for using the Crossmaps approach to ex-post harmonisation of aggregate statistics — xmap-package","title":"xmap: Data structures and functions for using the Crossmaps approach to ex-post harmonisation of aggregate statistics — xmap-package","text":"Provides tools workflows harmonising, recoding redistributing aggregate statistics related taxonomies.","code":""},{"path":[]},{"path":"https://cynthiahqy.github.io/xmap/reference/xmap-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"xmap: Data structures and functions for using the Crossmaps approach to ex-post harmonisation of aggregate statistics — xmap-package","text":"Maintainer: Cynthia Huang cynthiahqy@gmail.com Authors: Laura Puzzello [funder]","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/xmap-rlang.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal rlang methods — xmap-rlang","title":"Internal rlang methods — xmap-rlang","text":"Internal rlang methods","code":""},{"path":"https://cynthiahqy.github.io/xmap/reference/xmap-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — xmap-vctrs","title":"Internal vctrs methods — xmap-vctrs","text":"Internal vctrs methods","code":""}]
